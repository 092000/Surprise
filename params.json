{
  "name": "Surprise",
  "tagline": "Surprise is a Python recommender system library aimed towards researchers, teachers and students.",
  "body": "[![GitHub version](https://badge.fury.io/gh/nicolashug%2FSurprise.svg)](https://badge.fury.io/gh/nicolashug%2FSurprise)\r\n[![Documentation Status](https://readthedocs.org/projects/surprise/badge/?version=latest)](http://surprise.readthedocs.io/en/latest/?badge=latest)\r\n[![Build\r\nStatus](https://travis-ci.org/NicolasHug/Surprise.svg?branch=master)](https://travis-ci.org/NicolasHug/Surprise)\r\n[![python_versions](https://img.shields.io/badge/python-2.7%2C%203.5-blue.svg)]\r\n(https://nicolashug.github.io/Surprise/)\r\n[![license](https://img.shields.io/badge/license-GPLv3-blue.svg)](https://github.com/NicolasHug/Surprise/blob/master/LICENSE.md)\r\n\r\n\r\nSurprise\r\n========\r\n\r\nOverview\r\n--------\r\n\r\n[Surprise](https://NicolasHug.github.io/Surprise/) is an open source Python library\r\nthat provides with tools to build and evaluate the performance of many\r\nrecommender system prediction algorithms. Its goal is to make life easy(-ier)\r\nfor reseachers, teachers and students who want to play around with new\r\nrecommender algorithms ideas and teach/learn more about recommender systems.\r\n\r\n[Surprise](https://NicolasHug.github.io/Surprise/) **was designed with the following\r\npurposes in mind**:\r\n\r\n- Give the user perfect control over his experiments. To this end, a strong\r\n  emphasis is laid on\r\n  [documentation](http://surprise.readthedocs.io/en/latest/index.html), which we\r\n  have tried to make as clear and precise as possible by pointing out every\r\n  details of the algorithms.\r\n- Alleviate the pain of [Dataset\r\n  handling](http://surprise.readthedocs.io/en/latest/getting_started.html#load-a-custom-dataset).\r\n  Users can use both *built-in* datasets\r\n  ([Movielens](http://grouplens.org/datasets/movielens/),\r\n  [Jester](http://eigentaste.berkeley.edu/dataset/)), and their own *custom* datasets.\r\n- Provide with various ready-to-use [prediction\r\n  algorithms](http://surprise.readthedocs.io/en/latest/prediction_algorithms_package.html) (Neighborhood approaches, SVD, SVD++...)\r\n- Make it easy to implement [new algorithm\r\n  ideas](http://surprise.readthedocs.io/en/latest/building_custom_algo.html).\r\n- Provide with tools to [evaluate](http://surprise.readthedocs.io/en/latest/evaluate.html),\r\n  [analyse](http://nbviewer.jupyter.org/github/NicolasHug/Surprise/tree/master/examples/notebooks/KNNBasic_analysis.ipynb/)\r\n  and\r\n  [compare](http://nbviewer.jupyter.org/github/NicolasHug/Surprise/tree/master/examples/notebooks/Compare.ipynb/)\r\n  the algorithms performance. Cross-validation procedures can be run very easily.\r\n\r\nThe name *SurPRISE* (roughly) stands for Simple Python RecommendatIon System\r\nEngine.\r\n\r\nInstallation / Usage\r\n--------------------\r\n\r\nThe easiest way is to use pip (you'll need [numpy](http://www.numpy.org/)):\r\n\r\n    $ pip install surprise\r\n\r\nOr you can clone the repo and build the source (you'll need\r\n[Cython](http://cython.org/) and [numpy](http://www.numpy.org/)):\r\n\r\n    $ git clone https://github.com/NicolasHug/surprise.git\r\n    $ python setup.py install\r\n\r\nExample\r\n-------\r\n\r\nHere is a simple example showing how you can (down)load a dataset, split it for\r\n3-folds cross-validation, and compute the MAE and RMSE of the\r\n[SVD](http://surprise.readthedocs.io/en/latest/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD)\r\nalgorithm.\r\n\r\n```python\r\nfrom surprise import SVD\r\nfrom surprise import Dataset\r\nfrom surprise import evaluate\r\n\r\n\r\n# Load the movielens-100k dataset (download it if needed),\r\n# and split it into 3 folds for cross-validation.\r\ndata = Dataset.load_builtin('ml-100k')\r\ndata.split(n_folds=3)\r\n\r\n# We'll use the famous SVD algorithm.\r\nalgo = SVD()\r\n\r\n# Evaluate performances of our algorithm on the dataset.\r\nperf = evaluate(algo, data, measures=['RMSE', 'MAE'])\r\n\r\nprint(perf)\r\n```\r\n\r\n**Output**:\r\n\r\n```\r\nEvaluating RMSE, MAE of algorithm SVD.\r\n\r\n        Fold 1  Fold 2  Fold 3  Mean\r\nMAE     0.7475  0.7447  0.7425  0.7449\r\nRMSE    0.9461  0.9436  0.9425  0.9441\r\n```\r\n\r\nBenchmarks\r\n----------\r\n\r\nThe following table shows the average RMSE and MAE and total execution time of various algorithms on a 5-folds cross-validation procedure. The dataset is the [Movielens 100k](http://grouplens.org/datasets/movielens/) dataset.\r\nAll experiments are run on a laptop with Intel Core i3 1.7 GHz, 4Go Ram.\r\n\r\n|                 |  RMSE  |   MAE  | Time (s) |\r\n|-----------------|:------:|:------:|:--------:|\r\n| [NormalPredictor](http://surprise.readthedocs.io/en/latest/basic_algorithms.html#surprise.prediction_algorithms.random_pred.NormalPredictor) | 1.5228 | 1.2242 |     4    |\r\n| [BaselineOnly](http://surprise.readthedocs.io/en/latest/basic_algorithms.html#surprise.prediction_algorithms.baseline_only.BaselineOnly)    |  .9445 |  .7488 |    16    |\r\n| [KNNBasic](http://surprise.readthedocs.io/en/latest/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBasic)        |  .9789 |  .7732 |    27    |\r\n| [KNNWithMeans](http://surprise.readthedocs.io/en/latest/knn_inspired.html#surprise.prediction_algorithms.knns.KNNWithMeans)    |  .9514 |  .7500 |    30    |\r\n| [KNNBaseline](http://surprise.readthedocs.io/en/latest/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBaseline)     |  .9306 |  .7334 |    44    |\r\n| [SVD](http://surprise.readthedocs.io/en/latest/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD)             |  .9392 |  .7409 |    46    |\r\n\r\nDocumentation, Getting Started\r\n------------------------------\r\n\r\nThe documentation with many other usage examples is [available\r\nonline](http://surprise.readthedocs.io/en/latest/index.html) on ReadTheDocs.\r\n\r\nLicense\r\n-------\r\n\r\nThis project is licensed under the GPLv3 license - see the LICENSE.md file for\r\ndetails.\r\n\r\nAcknowledgements:\r\n----------------\r\n\r\n- [Pierre-Fran√ßois Gimenez](https://github.com/PFgimenez), for his valuable\r\n  insights on software design.\r\n\r\nContributing\r\n------------\r\n\r\nAny kind of feedback/criticism would be greatly appreciated (software design,\r\ndocumentation, improvement ideas, spelling mistakes, etc...). Please feel free\r\nto contribute and send pull requests!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}